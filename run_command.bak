#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include "main.h"
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>

/**
 * run_command - prints the environment
 * @ac: command-line arguments.
 * @av: argument strings.
 * @env: variable strings
 * @interactive: ...
 * Return: Always 0.
 */

int run_command(int ac, char **av, char **env, int interactive)
{
	char *token;
	char command_path[512];
	char *command;
	char *lineptr = NULL;
	int new_ac;
	InternalFunction internal_function;
	char *new_av[10];
	size_t n = 0;

	ac = ac;
	av = av;

	while (1)
	{
		if (interactive)
		{
			prompt();
		}

		lineptr = NULL;
		n = 0;
		if (read_command(&lineptr, &n))
		{
			token = strtok(lineptr, " ");
			if (token != NULL)
			{
				/**
				 * the forked program will need a new arg vector built
				 * from the arguments provided on the command line.
				 * the current av belongs to the shell itself and execve will need
				 * the correct arg vector
				 */
				command = _strdup(token);
				new_ac = 0;
				new_av[new_ac] = (char *) command;
				token = strtok(NULL, " ");
				while (token != NULL)
				{
					new_av[++new_ac] = (char *)_strdup(token);
					token = strtok(NULL, " ");
				}
				new_av[++new_ac] = NULL;

				process_command(command, new_ac, new_av);

				internal_function = is_internal_command(command);
				if (internal_function != NULL)
				{
					 internal_function(new_ac, new_av, env);
				}
				else if (command_exists(command, command_path, env) != -1)
				{
					/**
					 * the command exists now fork the program with the new
					 * command path and arg vector
					 */
					free(new_av[0]);
					new_av[0] = _strdup(command_path);
					fork_command(command_path, new_av, env);
				}
				else
				{
					/**
					 * the command does not exists , lets prting the same error
					 * that bash will print. av[0] contains the name of the
					 * shell program
					 */
					_printf("%s: %s: command not found\n", av[0], command);
				}

				free_av(new_av);
			}
			if (lineptr != NULL)
			{
				free(lineptr);
			}
		}
		if (!interactive)
			break;
	}
	return (0);
}
